@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="warning">
    <h1 style="font-weight:500;">Speech Recognition SDK not found.</h1>
    <h2 style="font-weight:500;">Please execute <code>npm run bundle</code> and reload.</h2>
</div>
<div id="content" style="display:none">

    <br/>

    <p>Welcome to the Speech Service Test Studio. To test your customized speech service endpoints, enter the endpoint URL and
    your subscription key below. Then, press the Start button to begin recording your voice. Incremental results returned by the speech
    service will be displayed as you speak. When the speech service detect the end of your utterance (or you press the stop button), 
    it will return a final result. If you have enabled LUIS (via the checkbox, LUIS endpoint, and LUIS subscription key), a Pokemon
    will be displayed after the utterance intent is detected.</p>

    <br />

    <div class="row">
        <div class="col-7">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">Custom Speech Endpoint:</span>
                </div>
                <input type="text" class="form-control" id="endpointUrl" aria-describedby="basic-addon3" value="YOUR_CUSTOM_SPEECH_SERVICE_ENDPOINT_URL">
            </div>
        </div>
        <div class="col-5">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">Subscription Key:</span>
                </div>
                <input type="text" class="form-control" id="key" aria-describedby="basic-addon3" value="YOUR_CUSTOM_SPEECH_SERVICE_SUBSCRIPTION_KEY">
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-7">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        Enable?&nbsp;
                        <input id="LUISswitch" type="checkbox" aria-label="Checkbox for following text input">
                    </div>
                    <span class="input-group-text" id="basic-addon3">LUIS Endpoint:</span>
                </div>
                <input type="text" class="form-control" id="LUISendpointUrl" aria-describedby="basic-addon3" value="YOUR_LUIS_ENDPOINT_URL">
            </div>
        </div>
        <div class="col-5">
            <div class="input-group input-group-sm mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon3">Subscription Key:</span>
                </div>
                <input type="text" class="form-control" id="LUISkey" aria-describedby="basic-addon3" value="YOUR_LUIS_SUBSCRIPTION_KEY">
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col"></div>
        <div class="col text-center">
            <button class="btn btn-primary" id="startBtn" disabled="disabled">Start</button>
            &nbsp;
            <button class="btn btn-danger" id="stopBtn" disabled="disabled">Stop</button>
        </div>
        <div class="col"></div>
    </div>

    <br/>

    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="phraseDiv">JSON-formatted Results</label>
                <textarea class="form-control form-control-sm" id="phraseDiv" rows="12"></textarea>
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="phraseDiv">Speech Service Incremental Results</label>
                <span id="hypothesisDiv" style="display:block;"></span>
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="phraseDiv">&nbsp;</label>
                <img id="intentImage" src="#" alt="" style="max-width: 200px;" />
            </div>
        </div>
    </div>

    <table width="100%" style="display: none;">
        <tr>
            <td align="right">Language:</td>
            <td align="left">
                <select id="languageOptions">
                    <option value="ar-EG">Arabic - EG</option>
                    <option value="zh-CN">Chinese - CN</option>
                    <option value="en-GB">English - GB</option>
                    <option value="en-US" selected="selected">English - US</option>
                    <option value="fr-FR">French - FR</option>
                    <option value="de-DE">German - DE</option>
                    <option value="it-IT">Italian - IT</option>
                    <option value="ja-JP">Japanese - JP</option>
                    <option value="pt-BR">Portuguese - BR</option>
                    <option value="ru-RU">Russian - RU</option>
                    <option value="es-ES">Spanish - ES</option>
                </select>
            </td>
        </tr>
        <tr>
            <td align="right">Recognition Mode:</td>
            <td align="left">
                <select id="recognitionMode">
                    <option value="Interactive">Interactive</option>
                    <option value="Conversation">Conversation</option>
                    <option selected="selected" value="Dictation">Dictation</option>
                </select>
            </td>
        </tr>
        <tr>
            <td align="right">Format:</td>
            <td align="left">
                <select id="formatOptions">
                    <option value="Simple" selected="selected">Simple Result</option>
                    <option value="Detailed">Detailed Result</option>
                </select>
            </td>
        </tr>
        <tr>
            <td align="right">Input:</td>
            <td align="left">
                <select id="inputSource">
                    <option value="Mic" selected="selected">Microphone</option>
                    <option value="File">Audio File</option>
                </select>
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <input type="file" id="filePicker" accept=".wav" style="display:none" />
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <table>
                    <tr>
                        <td>Results:</td>
                        <td>Current hypothesis:</td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td align="right">Status:</td>
            <td align="left"><span id="statusDiv"></span></td>
        </tr>
        <tr>
            <td align="right">Intent:</td>
            <td align="left"><img id="intentImage" src="" alt="No intent identified." width="200" /></td>
        </tr>
    </table>
</div>
<!-- SDK REFERENCE -->
<script src="~/Scripts/sdk/speech.sdk.bundle.js"></script>
<!-- SDK USAGE -->
<script>
    // On document load resolve the SDK dependency
    function Initialize(onComplete) {
        if (!!window.SDK) {
            document.getElementById('content').style.display = 'block';
            document.getElementById('warning').style.display = 'none';
            onComplete(window.SDK);
        }
    }

    // Setup the recognizer
    function RecognizerSetup(SDK, recognitionMode, language, format, subscriptionKey, baseURL) {

        switch (recognitionMode) {
            case "Interactive":
                recognitionMode = SDK.RecognitionMode.Interactive;
                break;
            case "Conversation":
                recognitionMode = SDK.RecognitionMode.Conversation;
                break;
            case "Dictation":
                recognitionMode = SDK.RecognitionMode.Dictation;
                break;
            default:
                recognitionMode = SDK.RecognitionMode.Interactive;
        }

        var recognizerConfig = new SDK.RecognizerConfig(
            new SDK.SpeechConfig(
                new SDK.Context(
                    new SDK.OS(navigator.userAgent, "Browser", null),
                    new SDK.Device("SpeechSample", "SpeechSample", "1.0.00000"))),
            recognitionMode,
            language, // Supported languages are specific to each recognition mode. Refer to docs.
            format, // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)
            baseURL);

        var useTokenAuth = false;

        var authentication = function () {
            if (!useTokenAuth)
                return new SDK.CognitiveSubscriptionKeyAuthentication(subscriptionKey);

            var callback = function () {
                var tokenDeferral = new SDK.Deferred();
                try {
                    var xhr = new (XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');
                    xhr.open('GET', '/token', 1);
                    xhr.onload = function () {
                        if (xhr.status === 200) {
                            tokenDeferral.Resolve(xhr.responseText);
                        } else {
                            tokenDeferral.Reject('Issue token request failed.');
                        }
                    };
                    xhr.send();
                } catch (e) {
                    window.console && console.log(e);
                    tokenDeferral.Reject(e.message);
                }
                return tokenDeferral.Promise();
            }

            return new SDK.CognitiveTokenAuthentication(callback, callback);
        }();

        var files = document.getElementById('filePicker').files;
        if (!files.length) {
            return SDK.CreateRecognizer(recognizerConfig, authentication);
        } else {
            return SDK.CreateRecognizerWithFileAudioSource(recognizerConfig, authentication, files[0]);
        }
    }

    // Start the recognition
    function RecognizerStart(SDK, recognizer) {
        recognizer.Recognize((event) => {
            /*
             Alternative syntax for typescript devs.
             if (event instanceof SDK.RecognitionTriggeredEvent)
            */
            switch (event.Name) {
                case "RecognitionTriggeredEvent":
                    UpdateStatus("Initializing");
                    break;
                case "ListeningStartedEvent":
                    UpdateStatus("Listening");
                    break;
                case "RecognitionStartedEvent":
                    UpdateStatus("Listening_Recognizing");
                    break;
                case "SpeechStartDetectedEvent":
                    UpdateStatus("Listening_DetectedSpeech_Recognizing");
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechHypothesisEvent":
                    UpdateRecognizedHypothesis(event.Result.Text, false);
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechFragmentEvent":
                    UpdateRecognizedHypothesis(event.Result.Text, true);
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechEndDetectedEvent":
                    OnSpeechEndDetected();
                    UpdateStatus("Processing_Adding_Final_Touches");
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechSimplePhraseEvent":
                    UpdateRecognizedPhrase(JSON.stringify(event.Result, null, 3));
                    break;
                case "SpeechDetailedPhraseEvent":
                    UpdateRecognizedPhrase(JSON.stringify(event.Result, null, 3));
                    break;
                case "RecognitionEndedEvent":
                    OnComplete();
                    UpdateStatus("Idle");
                    console.log(JSON.stringify(event)); // Debug information
                    break;
                default:
                    console.log(JSON.stringify(event)); // Debug information
            }
        })
            .On(() => {
                // The request succeeded. Nothing to do here.
            },
                (error) => {
                    console.error(error);
                });
    }

    // Stop the Recognition.
    function RecognizerStop(SDK, recognizer) {
        // recognizer.AudioSource.Detach(audioNodeId) can be also used here. (audioNodeId is part of ListeningStartedEvent)
        recognizer.AudioSource.TurnOff();
    }
</script>
<!-- Browser Hooks -->
<script>
    var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv;
    var endpointUrl, key, languageOptions, formatOptions, recognitionMode, inputSource, filePicker;
    var SDK;
    var recognizer;
    var previousSubscriptionKey;
    var intentImage, LUISendpointUrl, LUISkey, LUISswitch;

    document.addEventListener("DOMContentLoaded", function () {
        createBtn = document.getElementById("createBtn");
        startBtn = document.getElementById("startBtn");
        stopBtn = document.getElementById("stopBtn");
        phraseDiv = document.getElementById("phraseDiv");
        hypothesisDiv = document.getElementById("hypothesisDiv");
        statusDiv = document.getElementById("statusDiv");
        endpointUrl = document.getElementById("endpointUrl");
        key = document.getElementById("key");
        LUISendpointUrl = document.getElementById("LUISendpointUrl");
        LUISkey = document.getElementById("LUISkey");
        LUISswitch = document.getElementById("LUISswitch");
        languageOptions = document.getElementById("languageOptions");
        formatOptions = document.getElementById("formatOptions");
        inputSource = document.getElementById("inputSource");
        recognitionMode = document.getElementById("recognitionMode");
        filePicker = document.getElementById('filePicker');
        intentImage = document.getElementById("intentImage");

        languageOptions.addEventListener("change", Setup);
        formatOptions.addEventListener("change", Setup);
        recognitionMode.addEventListener("change", Setup);

        startBtn.addEventListener("click", function () {
            if (LUISswitch.checked && (LUISendpointUrl.value == "" || LUISendpointUrl.value == "YOUR_LUIS_ENDPOINT_URL")) {
                alert("Please enter your Language Understanding (LUIS) URL!");
                return;
            }
            if (LUISswitch.checked && (LUISkey.value == "" || LUISkey.value == "YOUR_LUIS_SUBSCRIPTION_KEY")) {
                alert("Please enter your Language Understanding (LUIS) subscription key!");
                return;
            }
            if (endpointUrl.value == "" || endpointUrl.value == "YOUR_CUSTOM_SPEECH_SERVICE_ENDPOINT_URL") {
                alert("Please enter your Custom Speech Service Endpoint URL!");
                return;
            }
            if (key.value == "" || key.value == "YOUR_CUSTOM_SPEECH_SERVICE_SUBSCRIPTION_KEY") {
                alert("Please enter your Custom Speech Service subscription key!");
                return;
            }
            if (inputSource.value === "File") {
                filePicker.click();
            } else {
                if (!recognizer || previousSubscriptionKey != key.value) {
                    previousSubscriptionKey = key.value;
                    Setup();
                }

                hypothesisDiv.innerHTML = "";
                phraseDiv.innerHTML = "";
                RecognizerStart(SDK, recognizer);
                startBtn.disabled = true;
                stopBtn.disabled = false;
            }
        });

        endpointUrl.addEventListener("focus", function () {
            if (endpointUrl.value == "YOUR_CUSTOM_SPEECH_SERVICE_ENDPOINT_URL") {
                endpointUrl.value = "";
            }
        });

        endpointUrl.addEventListener("focusout", function () {
            if (endpointUrl.value == "") {
                endpointUrl.value = "YOUR_CUSTOM_SPEECH_SERVICE_ENDPOINT_URL";
            }
        });

        LUISendpointUrl.addEventListener("focus", function () {
            if (LUISendpointUrl.value == "YOUR_LUIS_ENDPOINT_URL") {
                LUISendpointUrl.value = "";
            }
        });

        LUISendpointUrl.addEventListener("focusout", function () {
            if (LUISendpointUrl.value == "") {
                LUISendpointUrl.value = "YOUR_LUIS_ENDPOINT_URL";
            }
        });

        key.addEventListener("focus", function () {
            if (key.value == "YOUR_CUSTOM_SPEECH_SERVICE_SUBSCRIPTION_KEY") {
                key.value = "";
            }
        });

        key.addEventListener("focusout", function () {
            if (key.value == "") {
                key.value = "YOUR_CUSTOM_SPEECH_SERVICE_SUBSCRIPTION_KEY";
            }
        });

        LUISkey.addEventListener("focus", function () {
            if (LUISkey.value == "YOUR_LUIS_SUBSCRIPTION_KEY") {
                LUISkey.value = "";
            }
        });

        LUISkey.addEventListener("focusout", function () {
            if (LUISkey.value == "") {
                LUISkey.value = "YOUR_LUIS_SUBSCRIPTION_KEY";
            }
        });

        filePicker.addEventListener("change", function () {
            Setup();
            hypothesisDiv.innerHTML = "";
            phraseDiv.innerHTML = "";
            RecognizerStart(SDK, recognizer);
            startBtn.disabled = true;
            stopBtn.disabled = false;
            filePicker.value = "";
        });

        stopBtn.addEventListener("click", function () {
            RecognizerStop(SDK, recognizer);
            startBtn.disabled = false;
            stopBtn.disabled = true;
        });

        Initialize(function (speechSdk) {
            SDK = speechSdk;
            startBtn.disabled = false;
        });
    });

    function Setup() {
        if (recognizer != null) {
            RecognizerStop(SDK, recognizer);
        }
        recognizer = RecognizerSetup(SDK, recognitionMode.value, languageOptions.value, SDK.SpeechResultFormat[formatOptions.value], key.value, endpointUrl.value);
    }

    function UpdateStatus(status) {
        statusDiv.innerHTML = status;
    }

    function UpdateRecognizedHypothesis(text, append) {
        if (append)
            hypothesisDiv.innerHTML += text + " ";
        else
            hypothesisDiv.innerHTML = text;

        var length = hypothesisDiv.innerHTML.length;
        if (length > 403) {
            hypothesisDiv.innerHTML = "..." + hypothesisDiv.innerHTML.substr(length - 400, length);
        }
    }

    function OnSpeechEndDetected() {
        stopBtn.disabled = true;
    }

    function UpdateRecognizedPhrase(json) {
        hypothesisDiv.innerHTML = "";
        phraseDiv.innerHTML += json + "\n\n";

        if (LUISswitch.checked) {
            var result = JSON.parse(json);
            if (!result.RecognitionStatus || !result.DisplayText) return;
            if (result.RecognitionStatus != "Success") return;
            SubmitRecognizedPhraseToLUIS(result.DisplayText,
                function (responseJson) {
                    phraseDiv.innerHTML += responseJson + "\n\n";
                    ProcessLUISIntent(responseJson);
                }
            );
        }
    }

    function SubmitRecognizedPhraseToLUIS(phrase, callback) {
        var url = LUISendpointUrl.value + "?subscription-key=" + LUISkey.value + "&verbose=true&timezoneOffset=0&q=" + encodeURI(phrase);
        var xhr = new (XMLHttpRequest || ActiveXObject)('MSXML2.XMLHTTP.3.0');
        xhr.open('GET', url, 1);
        xhr.onload = function () {
            if (xhr.status === 200) {
                callback(xhr.responseText);
            } else {
                alert("error contacting LUIS");
            }
        };
        xhr.send();
    }

    function ProcessLUISIntent(responseText) {
        var json = JSON.parse(responseText);

        // get top scoring intent
        var intent = "None";
        if (json.topScoringIntent) {
            intent = json.topScoringIntent.intent;
        }
        phraseDiv.innerHTML += "Intent: " + intent + "\n";

        // get the identified pokemon entity
        pokemon = ParsePokemonEntity(json);
        phraseDiv.innerHTML += "Pokemon: " + pokemon + "\n\n";

        var image;
        switch (intent) {
            case "Jump": {
                if (pokemon == "Jigglypuff") image = "jigglypuff-jump.png";
                else image = "unknown.gif";
                break;
            }
            case "Sing": {
                if (pokemon == "Jigglypuff") image = "jigglypuff-sing.png";
                else image = "unknown.gif";
                break;
            }
            case "Wave": {
                if (pokemon == "Jigglypuff") image = "jigglypuff-wave.png";
                else if (pokemon == "Pikachu") image = "pikachu-wave.png";
                else image = "unknown.gif";
                break;
            }
            case "Scratch": {
                if (pokemon == "Meowth") image = "meowth-scratch.png";
                else image = "unknown.gif";
                break;
            }
            case "Sit": {
                if (pokemon == "Meowth") image = "meowth-sit.png";
                else if (pokemon == "Pikachu") image = "pikachu-sit.png";
                else image = "unknown.gif";
                break;
            }
            case "Wink": {
                if (pokemon == "Meowth") image = "meowth-wink.png";
                else image = "unknown.gif";
                break;
            }
            case "ActAngry": {
                if (pokemon == "Pikachu") image = "pikachu-actangry.png";
                else image = "unknown.gif";
                break;
            }
            case "None": {
                image = "unknown.gif";
                break;
            }
        }

        intentImage.src = "/Content/" + image;
    }

    function ParsePokemonEntity(json) {
        var defaultPokemon = "Unknown";
        if (!json.entities) return defaultPokemon;
        if (json.entities.length == 0) return defaultPokemon;
        if (!json.entities[0].type) return defaultPokemon;
        if (json.entities[0].type != "Pokemon") return defaultPokemon;
        if (!json.entities[0].resolution) return defaultPokemon;
        if (!json.entities[0].resolution.values) return defaultPokemon;
        if (json.entities[0].resolution.values.length == 0) return defaultPokemon;
        if (!json.entities[0].resolution.values[0]) return defaultPokemon;
        return json.entities[0].resolution.values[0];
    }

    function OnComplete() {
        startBtn.disabled = false;
        stopBtn.disabled = true;
    }
</script>

